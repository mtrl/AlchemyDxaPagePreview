<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tridion.ContentManager.TemplateTypes</name>
    </assembly>
    <members>
        <member name="T:Tridion.ContentManager.TemplateTypes.Configuration.TemplateType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.Configuration.TemplateType.#ctor">
            <summary>
            Constructor for TemplateType class.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.Configuration.TemplateType.#ctor(System.Int32,System.String,System.String,System.Boolean,System.String,Tridion.ContentManager.TemplateTypes.Configuration.WebDavFileExtensions)">
            <summary>
            Constructor for TemplateType class
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="mimeType"></param>
            <param name="hasBinaryContent"></param>
            <param name="contentHandler"></param>
            <param name="webdavFileExtensions"></param>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.Configuration.TemplateType.Id">
            <summary>
            Id property of the TemplateType object.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.Configuration.TemplateType.Name">
            <summary>
            Name property of the TemplateType object.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.Configuration.TemplateType.TitleResource">
            <summary>
            TitleResource property of the TemplateType object.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.Configuration.TemplateType.MimeType">
            <summary>
            MimeType property of the TemplateType object
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.Configuration.TemplateType.HasBinaryContent">
            <summary>
            HasBinaryContent property of the TemplateType object.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.Configuration.TemplateType.ContentHandler">
            <summary>
            ContentHandler property of the TemplateType object.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.Configuration.TemplateType.WebDavFileExtensions">
            <summary>
            WebDavFileExtensions property of the TemplateType object.
            </summary>
        </member>
        <member name="T:Tridion.ContentManager.TemplateTypes.Configuration.TemplateTypes">
            <summary>
            TemplateTypes class.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.Configuration.TemplateTypes.Add(Tridion.ContentManager.TemplateTypes.Configuration.TemplateType)">
            <summary>
            Add method.
            </summary>
            <param name="templateType"></param>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.Configuration.TemplateTypes.Remove(Tridion.ContentManager.TemplateTypes.Configuration.TemplateType)">
            <summary>
            Remove method.
            </summary>
            <param name="templateType"></param>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.Configuration.TemplateTypes.RemoveAt(System.Int32)">
            <summary>
            RemoveAt method.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.Configuration.TemplateTypes.Clear">
            <summary>
            Clear method.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.Configuration.TemplateTypes.CreateNewElement">
            <summary>
            CreateNewElement method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.Configuration.TemplateTypes.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            GetElementKey method.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.Configuration.TemplateTypes.Item(System.Int32)">
            <summary>
            this 
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Tridion.ContentManager.TemplateTypes.Configuration.WebDavFileExtension">
            <summary>
            WebDavFileExtension class.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.Configuration.WebDavFileExtension.#ctor">
            <summary>
            Constructor for the class.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.Configuration.WebDavFileExtension.#ctor(Tridion.ContentManager.ItemType,System.String)">
            <summary>
            Constructor for the class.
            </summary>
            <param name="itemType"></param>
            <param name="fileExtension"></param>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.Configuration.WebDavFileExtension.ItemType">
            <summary>
            ItemType property of the class.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.Configuration.WebDavFileExtension.FileExtension">
            <summary>
            FileExtension property of the class.
            </summary>
        </member>
        <member name="T:Tridion.ContentManager.TemplateTypes.Configuration.WebDavFileExtensions">
            <summary>
            WebDavFileExtensions class.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.Configuration.WebDavFileExtensions.Add(Tridion.ContentManager.TemplateTypes.Configuration.WebDavFileExtension)">
            <summary>
            Add method.
            </summary>
            <param name="webDavFileExtension"></param>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.Configuration.WebDavFileExtensions.Remove(Tridion.ContentManager.TemplateTypes.Configuration.WebDavFileExtension)">
            <summary>
            Remove method.
            </summary>
            <param name="webDavFileExtension"></param>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.Configuration.WebDavFileExtensions.RemoveAt(System.Int32)">
            <summary>
            Remove method.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.Configuration.WebDavFileExtensions.Clear">
            <summary>
            Clear method.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.Configuration.WebDavFileExtensions.CreateNewElement">
            <summary>
            CreateNewElement method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.Configuration.WebDavFileExtensions.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            GetElementKey Method.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.Configuration.WebDavFileExtensions.Item(Tridion.ContentManager.ItemType)">
            <summary>
            this attribute.
            </summary>
            <param name="itemType"></param>
            <returns></returns>
        </member>
        <member name="T:Tridion.ContentManager.TemplateTypes.Configuration.TemplateTypeRegistry">
            <summary>
            TemplateTypeRegistry class.
            </summary>
        </member>
        <member name="F:Tridion.ContentManager.TemplateTypes.Configuration.TemplateTypeRegistry.SectionName">
            <summary>
            SectionName property.
            </summary>
        </member>
        <member name="F:Tridion.ContentManager.TemplateTypes.Configuration.TemplateTypeRegistry._templateTypes">
            <summary>
            _templateTypes property.
            </summary>
        </member>
        <member name="F:Tridion.ContentManager.TemplateTypes.Configuration.TemplateTypeRegistry._nullHandler">
            <summary>
            _nullHandler property.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.Configuration.TemplateTypeRegistry.TemplateTypes">
            <summary>
            Gets or sets TemplateTypes property.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.Configuration.TemplateTypeRegistry.Name">
            <summary>
            Gets the name of the section.
            </summary>
            <value>
            The name of the section.
            </value>
        </member>
        <member name="T:Tridion.ContentManager.TemplateTypes.TemplateTypesException">
            <summary>
            Template type specific exceptions
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.TemplateTypesException.#ctor(Tridion.Localization.LocalizableMessage,System.Exception,Tridion.ContentManager.TcmErrorCode,Tridion.ContentManager.LogCategory,System.Diagnostics.TraceEventType)">
            <summary>
            Use this constructor to specify all eventlog options yourself.
            </summary>        
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.TemplateTypesException.#ctor(Tridion.Localization.LocalizableMessage,System.Exception,Tridion.ContentManager.TcmErrorCode,Tridion.ContentManager.LogCategory)">
            <summary>
            Constructor to use the default severity.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.TemplateTypesException.#ctor(Tridion.Localization.LocalizableMessage,System.Exception,Tridion.ContentManager.TcmErrorCode)">
            <summary>
            Constructor to use the default LogCategory and severity.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.TemplateTypesException.#ctor(Tridion.Localization.LocalizableMessage,Tridion.ContentManager.TcmErrorCode)">
            <summary>
            Constructor that can be used when no inner exception is caught.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.TemplateTypesException.#ctor(System.Exception,System.String,System.Object[])">
            <summary>
            Constructor that can be used without needing to create a localized message each time.
            </summary> 
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.TemplateTypesException.#ctor(System.Exception,System.String)">
            <summary>
            Constructor that can be used without needing to create a localized message each time.
            </summary> 
        </member>
        <member name="T:Tridion.ContentManager.TemplateTypes.Legacy.ScriptedTemplateContentHandler">
            <summary>
            Template Content Handler for (legacy) scripted Templates: VBScript and JScript Templates.
            </summary>
        </member>
        <member name="T:Tridion.ContentManager.TemplateTypes.TemplateContentHandler">
            <summary>
            Abstract base class for Template Content Handlers: classes with knowledge about how to find references in template content (for a specific template type).
            </summary>
            <remarks>
            Note that separate Template Content Handler instances are used for each Template instance.
            Furthermore, all template content processing for one Template instance is performed on the same Template Content Handler instance.
            Therefore, Template Content Handler can be implemented in a statefull manner: keeping state across method calls.
            </remarks>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.TemplateContentHandler.#ctor(Tridion.ContentManager.TcmUri)">
            <summary>
            Create a new Template Content Handler instance for a given Template.
            </summary>
            <param name="templateId">The ID (TCM URI) of the Template of which the content should be processed.</param>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.TemplateContentHandler.ValidateContent">
            <summary>
            Validate the template's content.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.TemplateContentHandler.ExtractReferences">
            <summary>
            Extract references to (potential) TCM items from the Template's content.
            </summary>
            <returns>The URIs (either TCM URIs or WebDAV URLs) of potential TCM items.</returns>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.TemplateContentHandler.SubstituteReferences(System.String[])">
            <summary>
            Substitute references to TCM items in the Template's content.
            </summary>
            <param name="newReferences">
            An array of URIs (either TCM URIs or WebDAV URLs) to substitute.
            The array has the same size and order as the one returned by <see cref="M:Tridion.ContentManager.TemplateTypes.TemplateContentHandler.ExtractReferences"/>.
            Extracted reference which turned out not to point to an existing TCM item will have a <c>null</c> newReference.
            </param>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.TemplateContentHandler.SubstituteRefTitles(System.String[])">
            <summary>
            Substitute the referenced titles in the template's content (if applicable)
            </summary>
            <param name="newRefTitles">A string array containing the new titles. The array has the same size and order as the one passed in <see cref="M:Tridion.ContentManager.TemplateTypes.TemplateContentHandler.SubstituteReferences(System.String[])"/></param>
            <remarks>
            The content of a template can contain titles of referenced items.
            When reading a template, the Tridion Business Layer uses the ExtractReferences method to retrieve a list of references.
            It then calls SubstituteRefTitles to update the reference titles SubstituteReferences to fixup the reference URIs.
            The default implementation of this method does nothing.
            Template Content Handlers for template types that have referenced titles in their content should override this method.
            </remarks>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.TemplateContentHandler.Content">
            <summary>
            Get or set the textual content of the Template.
            </summary>
            <remarks>
            This property reflects the substituted references after <see cref="M:Tridion.ContentManager.TemplateTypes.TemplateContentHandler.SubstituteReferences(System.String[])"/> has been called.
            </remarks>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.TemplateContentHandler.BinaryContent">
            <summary>
            Gets or sets the binary content of the Template.
            </summary>
            <remarks>
            This property reflects the substituted references after <see cref="M:Tridion.ContentManager.TemplateTypes.TemplateContentHandler.SubstituteReferences(System.String[])"/> has been called.
            </remarks>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.TemplateContentHandler.WebDavUrl">
            <summary>
            Gets or sets the WebDAV URL of the Template's container (i.e. the Organizational Item).
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.TemplateContentHandler.TemplateId">
            <summary>
            Gets the ID (TCM URI) of the template.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.Legacy.ScriptedTemplateContentHandler.#ctor(Tridion.ContentManager.TcmUri)">
            <summary>
            Create a new Template Content Handler instance for a given Template Id.
            </summary>
            <param name="templateId">The ID (TCM URI) of the Template of which the content should be processed.</param>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.Legacy.ScriptedTemplateContentHandler.ValidateContent">
            <summary>
            Validate the Template's content.
            </summary>
            <remarks>
            Validates that all references contain either a TCM URI of a TBB or a WebDAV URL.
            </remarks>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.Legacy.ScriptedTemplateContentHandler.ExtractReferences">
            <summary>
            Extract references to (potential) TCM items from the Template's content.
            </summary>
            <returns>An array of URIs (either TCM URIs or WebDAV URLs) of potential TCM items.</returns>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.Legacy.ScriptedTemplateContentHandler.SubstituteReferences(System.String[])">
            <summary>
            Substitute references to TCM items in the Template's (binary) content.
            </summary>
            <param name="newReferences">
            An array of URIs (either TCM URIs or WebDAV URLs) to substitute.
            The number of elements and order of the elements in the array corresponds to the array returned by <see cref="M:Tridion.ContentManager.TemplateTypes.Legacy.ScriptedTemplateContentHandler.ExtractReferences"/>.
            Extracted reference which turned out not to point to an existing TCM item will have a <c>null</c> newReference.
            </param>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.Legacy.ScriptedTemplateContentHandler.InternalExtractReferences(System.Boolean)">
            <summary>
            Get a list of Regex Captures for all references in the Template's content.
            </summary>
            <param name="validateUris">Indicates whether reference TCM URIs should be validated.</param>
        </member>
        <member name="T:Tridion.ContentManager.TemplateTypes.TemplateType">
            <summary>
            This class represents a template type
            </summary>
            <remarks>
            The class is public, internally creatable and exposes read-only properties.
            Use the TemplateTypeRegistry's TemplateTypes property to access an object of this class.
            </remarks>
            <example>
                TemplateType vbScript = TemplateTypeRegistry.GetTemplateType("VBScript");    
                or
                TemplateType vbScript = TemplateTypeRegistry.GetTemplateType(1);
            </example>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.TemplateType.#ctor(Tridion.ContentManager.TemplateTypes.Configuration.TemplateType)">
            <summary>
            Internal constuctor, used by the TemplateTypeRegistry to create a TemplateType object
            </summary>
            <param name="templateTypeConfig">Configuration type object exposing the collection of template types.</param>        
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.TemplateType.GetLocalizedTitle(System.Globalization.CultureInfo)">
            <summary>
            Gets the title (display name) of the template type in a given language.
            </summary>
            <remarks>
            If no title resource exists for the given language, the standard .NET language fallback mechanism applies.
            </remarks>
            <param name="culture">The language in which to get the title</param>
            <returns>The title in the given language or the symbolic name if no title resource is configured.</returns>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.TemplateType.AssertInitialized">
            <summary>
            Used to test if the private members have been serialized.
            This is necessary because the TemplateType class has a parameter-less constructor which doesn't
            initialize the object. The constructor is required to be serializable.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.TemplateType.AssertTemplateType(Tridion.ContentManager.ItemType)">
            <summary>
            Asserts if the type is registered for the template.
            </summary>
            <param name="itemType">Type of the item.</param>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.TemplateType.Id">
            <summary>
            Gets the numeric identifier of the template type.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.TemplateType.Name">
            <summary>
            Gets the (symbolic) name of the template type.
            </summary>
            <remarks>
            This is the symbolic name that is used in the XML representation of a template.
            </remarks>
            <seealso cref="P:Tridion.ContentManager.TemplateTypes.TemplateType.Title"/>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.TemplateType.Title">
            <summary>
            Gets the title (display name) of the template type.
            </summary>
            <remarks>
            The title is localizable, i.e. it depends on the <see cref="P:System.Threading.Thread.CurrentUICulture"/>.
            To get the title in another language, use <see cref="M:Tridion.ContentManager.TemplateTypes.TemplateType.GetLocalizedTitle(System.Globalization.CultureInfo)"/>.
            Use the <see cref="P:Tridion.ContentManager.TemplateTypes.TemplateType.Name"/> property for a non-localizable, symbolic name (used in XML).
            </remarks>
            <seealso cref="P:Tridion.ContentManager.TemplateTypes.TemplateType.Name"/>
            <seealso cref="M:Tridion.ContentManager.TemplateTypes.TemplateType.GetLocalizedTitle(System.Globalization.CultureInfo)"/>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.TemplateType.MimeType">
            <summary>
            Gets the template content's mimetype.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.TemplateType.HasBinaryContent">
            <summary>
            Whether the template's content is a binary stream or not.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.TemplateType.WebDavFileExtensions">
            <summary>
            A collection object representing the WebDavFileExtensions for this template type.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.TemplateType.WebDavFileExtensionMappings">
            <summary>
            A collection of <see cref="T:Tridion.ContentManager.TemplateTypes.WebDavFileExtensionMapping"/> for this template type.
            </summary>
        </member>
        <member name="T:Tridion.ContentManager.TemplateTypes.TemplateTypeRegistry">
            <summary>
            Entry point for handling template type specific functionality.    
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.TemplateTypeRegistry.LoadTemplateTypes(Tridion.ContentManager.ItemType)">
            <summary>
            Initializes the TemplateTypes object model using the Configuration.
            </summary>
            <param name="itemType"></param>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.TemplateTypeRegistry.GetTemplateTypes(Tridion.ContentManager.ItemType)">
            <summary>
            Use this static method to get a filtered representation of the template types in the Tridion Content Manager system in the form of an object model.
            </summary>
            <example>        
                string message = "";
                TemplateTypes componentTemplateTypes = TemplateTypeRegistry.GetTemplateTypes(ItemType.PageTemplate);
                foreach (TemplateType templateType in componentTemplateTypes)
                   {
                       message += templateType.Title + "\r\n";
                   }
            
            </example>
            <param name="itemType">Only template types that are available for this item type are returned. Supported <see cref="T:Tridion.ContentManager.ItemType"/>s are: 
            <see cref="F:Tridion.ContentManager.ItemType.ComponentTemplate"/>, <see cref="F:Tridion.ContentManager.ItemType.PageTemplate"/> and <see cref="F:Tridion.ContentManager.ItemType.TemplateBuildingBlock"/>.</param>
            <returns>A TemplateTypes collection object</returns>
            <exception cref="T:Tridion.ContentManager.TemplateTypes.TemplateTypesException"><paramref name="itemType"/> is not supported.</exception>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.TemplateTypeRegistry.GetTemplateTypes">
            <summary>
            Use this static method to get a representation of all the template types in the Tridion Content Manager system in the form of an object model.
            </summary>
            <example>        
                TemplateTypes allTemplateTypes = TemplateTypeRegistry.GetTemplateTypes();
            </example>
            <returns>A TemplateTypes collection object</returns>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.TemplateTypeRegistry.GetTemplateType(System.Int32)">
            <summary>
            Use this static method to get a representation of a specific template type.
            </summary>
            <example>        
                string message = "";
                TemplateType jScriptTemplateType = TemplateTypeRegistry.GetTemplateType(2);
                foreach (WebDavFileExtension webDavFileExtension in jScriptTemplateType.WebDavFileExtensions)
                {
                    message += webDavFileExtension.ItemType + " " + webDavFileExtension.FileExtension + "\r\n";
                }
            </example>
            <param name="id">The id of the template type.</param>
            <returns>The TemplateType object defined by the id of the template type.</returns>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.TemplateTypeRegistry.GetTemplateType(System.String)">
            <summary>
            Use this static method to get a representation of a specific template type.
            </summary>
            <example>        
                string message = "";
                TemplateType vbScriptTemplateType = TemplateTypeRegistry.GetTemplateType("VBScript");
                foreach (WebDavFileExtension webDavFileExtension in vbScriptTemplateType.WebDavFileExtensions)
                {
                    message += webDavFileExtension.ItemType + " " + webDavFileExtension.FileExtension + "\r\n";
                }
            </example>
            <param name="name">The name of the template type.</param>
            <returns>The TemplateType object defined by the title of the template type.</returns>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.TemplateTypeRegistry.GetTemplateContentHandler(Tridion.ContentManager.TemplateTypes.TemplateType,Tridion.ContentManager.TcmUri)">
            <summary>
            Gets the correct template's content handler related to the provided template information.
            </summary>
            <param name="templateType">The TemplateType for which the content handler should be retrieved</param>
            <param name="templateId">The template's TCM URI for which the content handler should be retrieved</param>     
            <returns>The TemplateContentHandler object for the provided template information</returns>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.TemplateTypeRegistry.Flush">
            <summary>
            Flushes the .Net Configuration objects
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.TemplateTypeRegistry.GetListTemplateTypes(Tridion.ContentManager.ItemType,System.Nullable{Tridion.ContentManager.ListBaseColumns},System.Int32)">
            <summary>
            Gets the list template types in XmlElement.
            </summary>
            <param name="itemType">Type of the item.</param>
            <param name="listBaseColumns">The list base columns.</param>
            <param name="languageId">The language id.</param>
            <returns></returns>
        </member>
        <member name="T:Tridion.ContentManager.TemplateTypes.TemplateTypes">
            <summary>
            This class represents a list of template types.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.TemplateTypes.#ctor(Tridion.ContentManager.TemplateTypes.Configuration.TemplateTypes)">
            <summary>
            Internal constuctor, used by the TemplateTypeRegistry to create a TemplateType collection object
            </summary>
            <param name="templateTypesConfig">Configuration type object exposing the collection of template types.</param>        
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.TemplateTypes.#ctor(Tridion.ContentManager.TemplateTypes.Configuration.TemplateTypes,Tridion.ContentManager.ItemType)">
            <summary>
            Internal constuctor, used by the TemplateTypeRegistry to create a TemplateTypes collection object
            </summary>
            <param name="templateTypesConfig">Configuration type object exposing the collection of template types.</param>
            <param name="itemType">Filter used to only return template types used for this item type.</param>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.TemplateTypes.AssertInitialized">
            <summary>
            Used to test if the private list has been created.
            This is necessary because the TemplateTypes class has a parameter-less constructor which doesn't
            initialize the object. The constructor is required to be serializable.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.TemplateTypes.Count">
            <summary>
            Returns the number of template types in the template types list.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.TemplateTypes.Item(System.String)">
            <summary>
            Use this indexer to refer to a template type by name.
            </summary>
            <example>
                TemplateType vbScriptTemplateType = templateTypes["VBScript"];
            </example>
            <param name="name">The name of the template type</param>
            <returns>The TemplateType object referred to by the name parameter</returns>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.TemplateTypes.Item(System.Int32)">
            <summary>
            Use this indexer to refer to a template type by its id.
            Example:
                TemplateType jScriptTemplateType = templateTypes[2];
            </summary>
            <param name="id">The id of the template type.</param>
            <returns>The TemplateType object referred to by the index parameter.</returns>
        </member>
        <member name="T:Tridion.ContentManager.TemplateTypes.WebDavFileExtension">
            <summary>
            This class represents a WebDavFileExtension
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.WebDavFileExtension.#ctor(Tridion.ContentManager.TemplateTypes.WebDavFileExtensionMapping)">
            <summary>
            Internal constructor used to create a WebDavFileExtension object.
            </summary>
            <param name="webDavFileExtensionMapping"><see cref="T:Tridion.ContentManager.TemplateTypes.WebDavFileExtensionMapping"/> object which represents the WebDavFileExtension.</param>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.WebDavFileExtension.ItemType">
            <summary>
            The item type that together with the template type defines the WebDav file extension.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.WebDavFileExtension.FileExtension">
            <summary>
            The file extension that is defined by the item type and template type together.
            </summary>
        </member>
        <member name="T:Tridion.ContentManager.TemplateTypes.WebDavFileExtensions">
            <summary>
            This class represents a list of WebDavFileExtensions.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.WebDavFileExtensions.#ctor(System.Collections.Generic.IEnumerable{Tridion.ContentManager.TemplateTypes.WebDavFileExtensionMapping})">
            <summary>
            Internal constructor used to create a WebDavFileExtensions object.
            </summary>
            <param name="webDavMappings">WebDavFileExtensionMappings which should be wrapped in WebDavFileExtensions.</param>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.WebDavFileExtensions.Count">
            <summary>
            Returns the number of WebDavFileExtensions in the list.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.WebDavFileExtensions.Item(Tridion.ContentManager.ItemType)">
            <summary>
            Use this indexer to refer to a WebDavFileExtension by ItemType enum.
            </summary>
            <example>
                WebDavFileExtension ctXsltFileExt = 
                    TemplateTypeRegistry.GetTemplateType("XSLT").WebDavFileExtensions[ItemType.ComponentTemplate];
            </example>
            <param name="itemType">The item type for which a WebDavFileExtension object exists</param>
            <returns>The WebDavFileExtension object referred to by the itemType parameter</returns>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.WebDavFileExtensions.Item(System.String)">
            <summary>
            Use this indexer to refer to a WebDavFileExtension by item type name.
            </summary>
            <example>
                WebDavFileExtension ctXsltFileExt = 
                    TemplateTypeRegistry.GetTemplateType("XSLT").WebDavFileExtensions["ComponentTemplate"];
            </example>
            <param name="itemTypeName">The name of an item type for which a WebDavFileExtension object exists.</param>
            <returns>The WebDavFileExtension object referred to by the itemTypeName parameter</returns>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.WebDavFileExtensions.Item(System.Int32)">
            <summary>
            Use this indexer to reference a WebDavFileExtension object by index.
            </summary>
            <param name="index">The index of the WebDavFileExtension object in the list.</param>
            <returns>The WebDavFileExtension object referenced by the index.</returns>
        </member>
        <member name="T:Tridion.ContentManager.TemplateTypes.WebDavFileExtensionMapping">
            <summary>
            This class represents a WebDavFileExtensionMapping.
            </summary>
        </member>
        <member name="M:Tridion.ContentManager.TemplateTypes.WebDavFileExtensionMapping.#ctor(Tridion.ContentManager.TemplateTypes.Configuration.WebDavFileExtension)">
            <summary>
            Internal constructor used to create a WebDavFileExtension object.
            </summary>
            <param name="webDavFileExtensionConfig">Configuration type exposing the WebDavFileExtension settings.</param>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.WebDavFileExtensionMapping.ItemType">
            <summary>
            The item type that together with the template type defines the WebDav file extension.
            </summary>
        </member>
        <member name="P:Tridion.ContentManager.TemplateTypes.WebDavFileExtensionMapping.FileExtension">
            <summary>
            The file extension that is defined by the item type and template type together.
            </summary>
        </member>
    </members>
</doc>
